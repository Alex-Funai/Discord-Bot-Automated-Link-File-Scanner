0
00:00:01,040 --> 00:00:02,120
[Autogenerated] In this clip, we're going

1
00:00:02,120 --> 00:00:04,660
to discuss payload detection rule options,

2
00:00:04,660 --> 00:00:06,940
specifically focusing on the content

3
00:00:06,940 --> 00:00:09,000
option and a few of its associated

4
00:00:09,000 --> 00:00:12,119
features. Content allows us to investigate

5
00:00:12,119 --> 00:00:14,800
the payload and detect specific strings,

6
00:00:14,800 --> 00:00:17,199
bits and patterns that indicate a

7
00:00:17,199 --> 00:00:19,809
potential attack. Let's look at an example

8
00:00:19,809 --> 00:00:22,809
situation where this would be valuable as

9
00:00:22,809 --> 00:00:24,800
we discussed in the last module, there

10
00:00:24,800 --> 00:00:26,469
will be situations where you could write a

11
00:00:26,469 --> 00:00:28,899
simple rule, and it would successfully

12
00:00:28,899 --> 00:00:32,159
detect an attacker's traffic. However, if

13
00:00:32,159 --> 00:00:34,479
you simply blocked a destination by port

14
00:00:34,479 --> 00:00:37,159
number, you could also generate alerts or

15
00:00:37,159 --> 00:00:39,369
block legitimate traffic destined for your

16
00:00:39,369 --> 00:00:42,509
internal network. Content can help reduce

17
00:00:42,509 --> 00:00:44,649
these false positives and permit

18
00:00:44,649 --> 00:00:47,210
legitimate traffic by first inspecting the

19
00:00:47,210 --> 00:00:50,119
payload. If it detects the specific

20
00:00:50,119 --> 00:00:53,340
content, it would generate an alert or

21
00:00:53,340 --> 00:00:55,920
block the traffic. The main difference

22
00:00:55,920 --> 00:00:58,280
here is that to produce a match, the

23
00:00:58,280 --> 00:01:01,679
packet needs specific content, not just to

24
00:01:01,679 --> 00:01:04,620
be delivered over that particular port. So

25
00:01:04,620 --> 00:01:06,230
when legitimate traffic is sent to our

26
00:01:06,230 --> 00:01:08,950
snort server, it also inspects the content

27
00:01:08,950 --> 00:01:11,569
of the payload and in this case determines

28
00:01:11,569 --> 00:01:14,109
that traffic can pass without an alert or

29
00:01:14,109 --> 00:01:17,030
other action. Content has a few different

30
00:01:17,030 --> 00:01:19,209
types and numerous modifiers that make it

31
00:01:19,209 --> 00:01:21,209
highly customizable to specific

32
00:01:21,209 --> 00:01:23,959
situations. The main three methods of

33
00:01:23,959 --> 00:01:26,239
detection. Using content at a high level.

34
00:01:26,239 --> 00:01:29,629
Our content itself, which bases detection

35
00:01:29,629 --> 00:01:31,689
on matching the payload to a specific

36
00:01:31,689 --> 00:01:34,269
string of text. If you want to hide this

37
00:01:34,269 --> 00:01:36,670
content match criteria, you can instead

38
00:01:36,670 --> 00:01:39,200
provide a hash value and use the protected

39
00:01:39,200 --> 00:01:41,629
content option, which will hash portions

40
00:01:41,629 --> 00:01:43,530
of the packet and attempt to match against

41
00:01:43,530 --> 00:01:46,569
your provided hash value. The last option,

42
00:01:46,569 --> 00:01:48,730
Raw Bites accomplishes the same task is

43
00:01:48,730 --> 00:01:51,349
content but instead matches on a string of

44
00:01:51,349 --> 00:01:54,109
hex characters. Let's look at a couple of

45
00:01:54,109 --> 00:01:56,680
examples. We'll be using the basic content

46
00:01:56,680 --> 00:01:58,849
option in our demo. So here I'll show you

47
00:01:58,849 --> 00:02:00,750
an example of protected content and rob

48
00:02:00,750 --> 00:02:03,560
bites. The first example is a protected

49
00:02:03,560 --> 00:02:06,280
content using a shot to 56 value of the

50
00:02:06,280 --> 00:02:08,879
content we want to detect. The hashing

51
00:02:08,879 --> 00:02:11,210
algorithm used is also specified using the

52
00:02:11,210 --> 00:02:13,800
hash option. Another example of the same

53
00:02:13,800 --> 00:02:15,900
rule, but instead using raw bites. Looks

54
00:02:15,900 --> 00:02:18,990
like this. Here we have the specific bites

55
00:02:18,990 --> 00:02:22,060
and hex between two pipes. If the string

56
00:02:22,060 --> 00:02:25,039
three Alfa 29 is detected in the packet,

57
00:02:25,039 --> 00:02:27,949
this rule generating alert in the upcoming

58
00:02:27,949 --> 00:02:29,710
demo. We're going to use a similar rule to

59
00:02:29,710 --> 00:02:31,830
detect specific traffic meant to exploit

60
00:02:31,830 --> 00:02:37,000
the vulnerability, and we're gonna block that traffic to prevent its execution.

